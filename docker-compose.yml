version: '2.1'
services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.0
    hostname: elasticsearch
    volumes:
      - ./es-gor:/gor
    environment:
      - "cluster.name=elasticsearch"
      - "bootstrap.memory_lock=true"
      - "http.cors.enabled=true"
      - "http.cors.allow-origin=*"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    depends_on:
      - kafka1
    links:
      - kafka1
    command: 
      - bash 
      - -c 
      - |
        /usr/local/bin/docker-entrypoint.sh eswrapper &
        echo "Waiting for Elasticsearch to start listening ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:9200/) -eq 000 ] ; do 
          sleep 5 
        done
        echo "Updating index_patterns to default to 1 shard and 0 replica"
        echo $$(curl http://localhost:9200/_template/all -X PUT -s -d '{"index_patterns":"*","settings":{"number_of_shards":1,"number_of_replicas":0}}' -H "Content-Type: application/json")
        echo "Creating ILM logstash policy"
        echo $$(curl http://localhost:9200/_ilm/policy/logstash_policy -X PUT -s -d '{"policy":{"phases":{"hot":{"actions":{"rollover":{"max_size":"10GB","max_age":"1d"}}},"delete":{"min_age":"2d","actions":{"delete":{}}}}}}' -H "Content-Type: application/json")
        echo "Creating ILM logstash template"
        echo $$(curl http://localhost:9200/_template/logstash_template -X PUT -s -d '{"index_patterns":["logstash-*"],"settings":{"number_of_shards":1,"number_of_replicas":0,"index.lifecycle.name":"logstash_policy","index.lifecycle.rollover_alias":"logstash"}}' -H "Content-Type: application/json")
        echo "Seeding logstash index with: logstash-000000"
        echo $$(curl http://localhost:9200/logstash-000000 -X PUT -s -d '{"aliases":{"logstash":{"is_write_index":true}}}' -H "Content-Type: application/json")
        sleep infinity

  kibana:
    image: docker.elastic.co/kibana/kibana:6.8.0
    hostname: kibana
    depends_on:
      - elasticsearch
    volumes:
      - ./kb-gor:/gor
    environment:
      - "xpack.security.enabled=false"
    links:
      - elasticsearch
    command: 
      - bash 
      - -c 
      - |
        /usr/local/bin/kibana-docker &
        echo "Waiting for Kibana to start listening ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:5601/) -eq 000 ] ; do 
          sleep 5 
        done
        echo "Creating index pattern"
        id=$$(curl -f -XPOST -H "Content-Type: application/json" -H "kbn-xsrf: anything" "http://localhost:5601/api/saved_objects/index-pattern" -d"{\"attributes\":{\"title\":\"logstash-*\",\"timeFieldName\":\"@timestamp\"}}" | python -c 'import sys, json; print json.load(sys.stdin)["id"]' )
        curl -XPOST -H "Content-Type: application/json" -H "kbn-xsrf: anything" "http://localhost:5601/api/kibana/settings/defaultIndex" -d"{\"value\":\"$$id\"}"
        sleep infinity

  zoo1:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zoo1
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ./full-stack/zoo1/data:/data
      - ./full-stack/zoo1/datalog:/datalog


  kafka1:
    image: confluentinc/cp-kafka:5.3.1
    hostname: kafka1
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./full-stack/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:5.3.1
    hostname: kafka-schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zoo1
      - kafka1

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.4
    hostname: kafka-schema-registry-ui
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    depends_on:
      - kafka-schema-registry

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:5.3.1
    hostname: kafka-rest-proxy
    environment:
      # KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    hostname: kafka-topics-ui
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy

  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.3.1
    hostname: kafka-connect
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
    volumes:
      - ./connectors:/etc/kafka-connect/jars/
    depends_on:
      - zoo1
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy

  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.4
    hostname: kafka-connect-ui
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka-connect

  ksql-server:
    image: confluentinc/cp-ksql-server:5.3.1
    hostname: ksql-server
    environment:
      KSQL_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
      KSQL_LISTENERS: http://0.0.0.0:8088/
      KSQL_KSQL_SERVICE_ID: ksql-server_
    depends_on:
      - zoo1
      - kafka1

  zoonavigator-web:
    image: elkozmon/zoonavigator-web:0.5.1
    environment:
      API_HOST: "zoonavigator-api"
      API_PORT: 9000
    links:
     - zoonavigator-api
    depends_on:
     - zoonavigator-api

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:0.5.1
    environment:
      SERVER_HTTP_PORT: 9000
    depends_on:
      - zoo1

  logstash-producer:
    image: logstash-producer:latest
    hostname: logstash-producer
    stdin_open: true
    tty: true
    environment:
      - "LOG_LEVEL=error"
      - "KAFKA_BOOTSTRAP_BROKERS=kafka1:9092"
      - "KAFKA_TOPIC=makeitwork"
      - "ES_HOST=elasticsearch"
      - "ES_PORT=9200"
    links:
      - kafka1
    depends_on:
      - kafka1
    volumes:
      - ${PWD}/kafka-producer.conf:/usr/share/logstash/pipeline/kafka-producer.conf

  logstash-consumer:
    image: logstash-consumer:latest
    hostname: logstash-consumer
    stdin_open: true
    tty: true
    environment:
      - "LOG_LEVEL=error"
      - "KAFKA_BOOTSTRAP_BROKERS=kafka1:9092"
      - "KAFKA_TOPIC=makeitwork"
      - "ES_HOST=elasticsearch"
      - "ES_PORT=9200"
    links:
      - elasticsearch
      - kafka1
    depends_on:
      - elasticsearch
    volumes:
      - ${PWD}/kafka-consumer.conf:/usr/share/logstash/pipeline/kafka-consumer.conf

  kafkamanager:
    image: kafkamanager/kafka-manager:2.0.0.2
    stdin_open: true
    tty: true
    environment:
      - "ZK_HOSTS=zoo1:2181"
    links:
      - kafka1
      - zoo1
    depends_on:
      - kafka1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    hostname: kafdrop
    environment:
      - "KAFKA_BROKERCONNECT=kafka1:9092"
      - "JVM_OPTS=-Xms32M -Xmx64M"
      - "SERVER_SERVLET_CONTEXTPATH=/"
    links:
      - kafka1
    depends_on:
      - kafka1

  redis:
    image: redis
    hostname: redis

  redisinsight:
    image: redislabs/redisinsight
    hostname: redisinsight
    links:
      - redis
    depends_on:
      - redis

  locustio:
    image: locustio/locust
    hostname: locustio
    environment:
      - "LOCUSTFILE_PATH=/mnt/locust/locustfile.py"
      - "TARGET_URL=http://kibana"
    links:
      - logstash-producer
    depends_on:
      - logstash-producer
    volumes:
      - ${PWD}/locustio:/mnt/locust
